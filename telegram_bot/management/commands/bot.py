import re
from django.core.management.base import BaseCommand
from django.utils import timezone
from django.shortcuts import get_object_or_404
from django.http.response import Http404
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from MeetUpPlanner import settings
from telegram.ext import Updater, CommandHandler, CallbackContext, \
    CallbackQueryHandler, MessageHandler, Filters
from telegram_bot.models import User, Event, Question


def start(update: Update, context: CallbackContext) -> None:
    full_name = update.message.from_user.full_name

    initial_message_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {full_name}. –Ø PyMeetBot ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è! üéâ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–æ–∫–ª–∞–¥—á–∏–∫–∞–º, —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏ "
        "–ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
    )

    registration_keyboard = [
        [InlineKeyboardButton("–î–æ–∫–ª–∞–¥—á–∏–∫", callback_data='speaker')],
        [InlineKeyboardButton("–°–ª—É—à–∞—Ç–µ–ª—å", callback_data='listener')]
    ]
    reply_markup = InlineKeyboardMarkup(registration_keyboard)

    update.message.reply_text(initial_message_text, reply_markup=reply_markup)


def choose_events(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data
    events = Event.objects.filter(end_time__gte=timezone.now())
    if data.startswith('speaker'):
        events_keyboard = [
            [InlineKeyboardButton(f"{event.title}", callback_data=str(event.id))] for event in events]
        reply_markup = InlineKeyboardMarkup(events_keyboard)
        query.edit_message_text(
            '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
            reply_markup=reply_markup
        )

    if data.startswith('listener'):
        events_keyboard = [
            [InlineKeyboardButton(f"{event.title}", callback_data=str(event.id))] for event in events]
        reply_markup = InlineKeyboardMarkup(events_keyboard)
        query.edit_message_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
            reply_markup=reply_markup
        )


def get_schedule_events(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data
    event_id = int(data)
    event = Event.objects.get(id=event_id)
    text = (f"""
        {event.title}
        –ù–∞—á–∞–ª–æ - {event.start_time.strftime('%d %B %H:%M')}
        {event.program_description}
        –°–ø–∏–∫–µ—Ä - {event.speaker}
        –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è - {event.location}
        """)

    try:
        user = get_object_or_404(User, telegram_id=query.from_user.id)
        print(user)
    except Http404:
        user = None

    if user:

        keyboard = [
            [InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É', callback_data=event_id)] if user.role == 'LISTENER' else [],
            [InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–ª—É—à–∞—Ç–µ–ª–µ–π', callback_data=event_id)] if user.role == 'SPEAKER' else [],
        ]
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        keyboard = [
            [InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='register_user')],
        ]
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

'''
def get_schedule_events(update: Update, context: CallbackContext):
    Autorize = False  # Future models
    query = update.callback_query
    query.answer()
    data = query.data
    if data.startswith('event_speaker'):
        events_keyboard = [
            [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                                  callback_data='#')]
        ]
        reply_markup = InlineKeyboardMarkup(events_keyboard)
        query.edit_message_text(
            '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            reply_markup=reply_markup
        )
    if data.startswith('event_listener'):
        if Autorize:
            events_keyboard = [
                [InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                                      callback_data='register_user')]
            ]
            reply_markup = InlineKeyboardMarkup(events_keyboard)
            query.edit_message_text(
                '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã',
                reply_markup=reply_markup
            )
        else:
            events_keyboard = [
                [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–æ–∫–ª–∞–¥—á–∏–∫—É",
                                      callback_data='register_user')]
            ]
            reply_markup = InlineKeyboardMarkup(events_keyboard)
            query.edit_message_text(
                '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                reply_markup=reply_markup
            )
'''

def register_user(update: Update, context: CallbackContext):
    query = update.callback_query
    if query:
        query.answer()
        data = query.data
        if data.startswith('register_user'):
            context.user_data['step'] = 'FIO'
            query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –§–ò–û')
            return

    message = update.message
    user_data = context.user_data

    if 'step' not in user_data:
        return

    if user_data['step'] == 'FIO':
        fio = message.text.strip()
        if not re.match(r'^[–ê-–Ø–∞-—è–Å—ëA-Za-z]+\s[–ê-–Ø–∞-—è–Å—ëA-Za-z]+\s[–ê-–Ø–∞-—è–Å—ëA-Za-z]+$', fio):
            message.reply_text(
                '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ.'
            )
            return
        user_data['fio'] = ' '.join(word.capitalize() for word in fio.split())
        user_data['step'] = 'PHONE'
        message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        return

    if user_data['step'] == 'PHONE':
        phone = message.text
        if not re.match(r'^\+?\d{10,15}$', phone):
            message.reply_text(
                '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890 –∏–ª–∏ 1234567890.'
            )
            return
        user_data['phone'] = phone
        user_data['step'] = 'EMAIL'
        message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã')
        return

    if user_data['step'] == 'EMAIL':
        email = message.text
        if not re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email):
            message.reply_text(
                '–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å.'
            )
            return
        user_data['email'] = email
        message.reply_text(
            f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–§–ò–û: {user_data["fio"]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user_data["phone"]}\nEmail: {user_data["email"]}'
        )
        user_data.clear()


class Command(BaseCommand):
    help = 'Starts the Telegram bot'

    def handle(self, *args, **kwargs):
        updater = Updater(settings.TELEGRAM_TOKEN, use_context=True)
        dispatcher = updater.dispatcher

        dispatcher.add_handler(CommandHandler('start', start))
        dispatcher.add_handler(CallbackQueryHandler(
            choose_events,
            pattern='speaker')
        )
        dispatcher.add_handler(CallbackQueryHandler(
            choose_events,
            pattern='listener')
        )
        '''
        dispatcher.add_handler(CallbackQueryHandler(
            get_schedule_events,
            pattern='event_speaker')
        )
        dispatcher.add_handler(CallbackQueryHandler(
            get_schedule_events,
            pattern='event_listener')
        )
        '''
        dispatcher.add_handler(CallbackQueryHandler(
            register_user,
            pattern='register_user')
        )
        dispatcher.add_handler(CallbackQueryHandler(
            get_schedule_events)
        )
        dispatcher.add_handler(
            MessageHandler(Filters.text & ~Filters.command, register_user)
        )

        updater.start_polling()
        updater.idle()
